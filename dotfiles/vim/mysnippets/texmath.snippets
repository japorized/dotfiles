priority -50

global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText', 'texCite']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

##############
# MATH STUFF #
##############
priority 100
context "math()"
snippet ... "ldots" iA
\ldots
endsnippet

context "math()"
snippet != "not equal" iA
\neq
endsnippet

context "math()"
snippet >= "geq" iA
\geq
endsnippet

context "math()"
snippet <= "leq" iA
\leq
endsnippet

context "math()"
snippet => "implies" iA
\implies
endsnippet

context "math()"
snippet := "define" iA
\coloneqq
endsnippet

context "math()"
snippet +O "oplus" iA
\oplus
endsnippet

context "math()"
snippet xO "otimes" iA
\otimes
endsnippet

context "math()"
snippet '(bb|cal|scr|frak)([a-zA-Z])' "mathfont" wrA
\math`!p snip.rv = match.group(1)`{`!p snip.rv = match.group(2).upper()`}$0
endsnippet

context "math()"
snippet '(bb|cal|scr|frak)' "mathbb" wr
\math`!p snip.rv = match.group(1)`{$1}$0
endsnippet

context "math()"
snippet quo "quotient" iA
\\quotient{$1}{$2}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '([0-9a-zA-Z\.\+\-\\]+)\/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet / "Fraction" "snip.visual_mode" eiA
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet /\ "wedge product" iA
\land
endsnippet

context "math()"
snippet \/ "lor" iA
\lor
endsnippet

context "math()"
snippet |\ "restriction" iA
\restriction
endsnippet

context "math()"
snippet '(?<!\\)lim_' "limit" irA
\lim_{$1}$0
endsnippet

context "math()"
snippet '(?<!\\)liminf_' "limit infimum" irA
\liminf_{$1}$0
endsnippet

context "math()"
snippet '(?<!\\)limsup_' "limit supremum" irA
\limsup_{$1}$0
endsnippet

context "math()"
snippet '(?<!\\)infty' "infinity" irA
\infty$0
endsnippet

context "math()"
snippet intg "Integrate" iA
\int_{${1}}^{${2}} $0
endsnippet

context "math()"
snippet '(?<=\s)sum' "Summation" irA
\sum_{${1}}^{${2}} $0
endsnippet

context "math()"
snippet '(?<=\s)prod' "Product" irA
\prod_{${1}}^{${2}} $0
endsnippet

context "math()"
snippet bcup "Union" iA
\bigcup_{${1}}^{${2}} $0
endsnippet

snippet bcap "Intersection" iA
\bigcap_{${1}}^{${2}} $0
endsnippet

context "math()"
snippet dif "with respect to" iA
\dif{$1}$0
endsnippet

context "math()"
snippet cases "Cases" w
\begin{cases}
	$0
\end{cases}
endsnippet

context "math()"
snippet mat "Smart Matrix" w
\begin{${1:p/b/v/V/B/small}matrix}
	$0
\end{$1matrix}
endsnippet

context "math()"
snippet '(p|b|v|V|B|small)mat' "Regex Matrix" irA
\begin{`!p snip.rv = match.group(1)`matrix}
	$0
\end{`!p snip.rv = match.group(1)`matrix}
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet lrp "left( right)" wA
\left( $1 \right)
endsnippet

snippet blrp "big left-right parentheses" wA
\big( $1 \big)
endsnippet

snippet bglrp "big left-right parentheses" wA
\bigg( $1 \bigg)
endsnippet

snippet Blrp "Big left-right parentheses" wA
\Big( $1 \Big)
endsnippet

snippet Bglrp "Big left-right parentheses" wA
\Bigg( $1 \Bigg)
endsnippet

snippet lrv "left| right|" wA
\left| $1 \right|
endsnippet

snippet lra "left< right>" wA
\langle $1 \rangle
endsnippet

snippet lrb "left\{ right\}" wA
\left\\{ $1 \right\\}
endsnippet

snippet lrs "left[ right]" wA
\left[ $1 \right]
endsnippet

context "math()"
snippet '\sand' "text and" riA
 \text{ and }
endsnippet

priority 10
context "math()"
snippet "vec" "vec" riA
\vec{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])vec" "vec" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 50
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet '(?!\\hat)(\\[a-z]+)bar' "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "(?<!\\wide)hat" "hat" riA
\hat{$1}$0
endsnippet

priority 50
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet '(?!\\hat|\\wide)(\\[a-z]+)hat' "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "tilde" "tilde" riA
\tilde{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])tilde" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet |> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet -> "to" iA
\to
endsnippet

context "math()"
snippet <|= "Normal subgroup of" iA
\trianglelefteq
endsnippet

context "math()"
snippet |>= "Normal subgroup to" iA
\trianglerighteq
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

# =====
#	 Actuarial
# =====
# Actuarial symbols has the schematic form of
# (I)(II)S(III)(IV), where
# I   - lower left
# II  - upper left
# III - lower right
# IV  - upper left
# These snippets are meant to be used with
# the actuarialsymbol package

priority 10
context "math()"
snippet '(?<!\\)angl' "angle notation" wrA
\\angl{$1}$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)angl{([0-9a-z+-]*)}' "angle notation" wrA
\\angl{`!p snip.rv = match.group(1)`}
endsnippet

# advanced
context "math()"
snippet '1p{([a-zA-Z0-9+{}.:_\\-]*)}' "survival" wrA
\\px{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet '1q{([a-zA-Z0-9+{}.:_\\-]*)}' "mortality" wrA
\\qx{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet '(?<!\\)(?<=\s|\$|\(|\{){(.*)}p{([a-zA-Z0-9+{}.:_\\-]*)}' "survival" wrA
\\px[`!p snip.rv = match.group(1)`]{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '(?<!\\)(?<=\s|\$|\(|\{){(.*)}q{([a-zA-Z0-9+{}.:_\\-]*)}' "mortality" wrA
\\qx[`!p snip.rv = match.group(1)`]{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '(?<!\\){([0-9a-zA-Z+\|-]*)}E{[0-9a-zA-Z+-]}' "pure endowment" wrA
\\Ex[`!p snip.rv = match.group(1)`]{`!p snip.rv = match.group(2)`}$0
endsnippet

context "math()"
snippet '({([0-9a-zA-Z\\\s]+?)})?A{([0-9a-zA-Z_\\+\{\}\-,\.:]+)}' "discrete insurance" wrA
\\Ax`!p snip.rv = '[' + match.group(2) + ']' if match.group(2) is not None else ""`{`!p snip.rv = match.group(3)`}$0
endsnippet

context "math()"
snippet '({([0-9a-zA-Z\\\s]+?)})?A\*{([0-9a-zA-Z_\\+\{\}\-,\.:]+)}' "cts ins" wrA
\\Ax*`!p snip.rv = '[' + match.group(2) + ']' if match.group(2) is not None else ""`{`!p snip.rv = match.group(3)`}$0
endsnippet

context "math()"
snippet '(?<!\\)(\{([0-9a-z]*\|)\})?a\*\*\{([a-zA-Z0-9+{}.:_\\-]*)\}' "discrete annuity due" wrA
\\ax**`!p snip.rv = '[' + match.group(2) + ']' if match.group(2) is not None else ""`{`!p snip.rv = match.group(3)`}$0
endsnippet

context "math()"
snippet '(?<!\\)(\{([0-9a-z]*\|)\})?a\*\{([a-zA-Z0-9+{}.:_\\-]*)\}' "cts annuity" wrA
\\ax*`!p snip.rv = '[' + match.group(2) + ']' if match.group(2) is not None else ""`{`!p snip.rv = match.group(3)`}$0
endsnippet

context "math()"
snippet '(?<!\\)(\{([0-9a-z]*\|)\})?a\{([a-zA-Z0-9+{}.:_\\-]*)\}' "discrete annuity imm" wrA
\\ax`!p snip.rv = '[' + match.group(2) + ']' if match.group(2) is not None else ""`{`!p snip.rv = match.group(3)`}$0
endsnippet

context "math()"
snippet '(?<!\\)(\{([0-9a-z]*\|)\})?s\*\*\{([a-zA-Z0-9+{}.:_\\-]*)\}' "discrete annuity (accumulation) due" wrA
\\sx**`!p snip.rv = '[' + match.group(2) + ']' if match.group(2) is not None else ""`{`!p snip.rv = match.group(3)`}$0
endsnippet

context "math()"
snippet '(?<!\\)(\{([0-9a-z]*\|)\})?s\*\{([a-zA-Z0-9+{}.:_\\-]*)\}' "cts annuity (accumulation)" wrA
\\sx*`!p snip.rv = '[' + match.group(2) + ']' if match.group(2) is not None else ""`{`!p snip.rv = match.group(3)`}$0
endsnippet

context "math()"
snippet '(?<!\\|b)(\{([0-9a-z]*\|)\})?s\{([a-zA-Z0-9+{}.:_\\-]*)\}' "discrete annuity (accumulation) imm" wrA
\\sx`!p snip.rv = '[' + match.group(2) + ']' if match.group(2) is not None else ""`{`!p snip.rv = match.group(3)`}$0
endsnippet

context "math()"
snippet '(?<!\\)\{([0-9a-z+|\\\{\}\.-]*)\}Vx' "policy value" wrA
\\Vx[`!p snip.rv = match.group(1)`]{}
endsnippet

context "math()"
snippet '(?<!\\)\{([0-9a-z+|\\\{\}\.-]*)\}V(g|n|e|FPT)' "policy value" wrA
\\Vx[`!p snip.rv = match.group(1)`]{}[`!p snip.rv = match.group(2)`]
endsnippet

# vim:ft=snippets:
