" General Configurations
if !has('nvim')
  set nocompatible
  set backspace=indent,eol,start
  set belloff=all   " Silence terminal bell
  set fillchars+=|
  set incsearch     " Show matches when searching
  set laststatus=2
  set ruler
endif

filetype plugin on
syntax on
set background=dark
set concealcursor=""
set conceallevel=2
set expandtab     " Expand tabs to spaces
set foldlevelstart=3
set ignorecase    " Ignore case when searching
set number
set noshowmode
set numberwidth=2
set relativenumber
set showmatch     " Show matching bracket
set shiftwidth=2  " Number of spaces to use for (auto) indent
set smartcase     " Override 'ignorecase' if search has uppercase
set softtabstop=2 " Number of tabs that a <Tab> counts for
set tabstop=2     " The number of spaces that a <Tab> counts for
set t_Co=256

if has("autocmd")
  if !has('nvim')
    filetype plugin indent on
  endif

  autocmd Syntax html,javascript,latex,vim setlocal foldmethod=indent
endif

if has('gvim')
  set guiheadroom=0
endif

" Highlights
hi VertSplit ctermbg=NONE guibg=NONE cterm=NONE
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
hi Conceal ctermfg=132 guifg=#af5f87

" Workaround for crontab saving problems
au FileType crontab setlocal bkc=yes

if has("autocmd")
  augroup templates
    autocmd BufNewFile *.sh 0r ~/.vim/templates/shell_template.sh
    autocmd BufNewFile *.html 0r ~/.vim/templates/html_default_template.sh
    autocmd BufNewFile *.tex 0r ~/.vim/templates/tex_default.sh
  augroup END

  autocmd FileType InsertLeave * update
endif

" netrw Configs
nmap <F2> :Vexplore<cr>
let g:netrw_liststyle=3    " Tree view
let g:netrw_banner=0       " Hide Banner by default, use I to toggle
let g:netrw_browse_split=3 " Opens new file in a new tab
let g:netrw_winsize=25     " netrw to only occupy 25% of the screen
let g:netrw_altv=1

" Pathogen plugin manager
execute pathogen#infect()
Helptags

" GitGutter Config
if exists('&signcolumn')  " > Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
set updatetime=250

" Gundo configurations
nnoremap <F5> :GundoToggle<CR>
let g:gundo_preview_height= 30
let g:gundo_preview_bottom= 1
let g:gundo_right= 1
let g:gundo_return_on_revert= 0

" Indentline Configs
let g:indentLine_char='|'

" Tex configs
let g:tex_flavor = 'latex'
nmap <F12> :VimtexCompile<cr>
let g:tex_conceal=""
let g:vimtex_fold_enabled=1
autocmd Filetype tex setl updatetime=1000
{%@@ if profile == "Earl-Grey.local" @@%}
let g:livepreview_previewer = 'open -a Skim'
{%@@ elif profile == "Oolong" @@%}
" let g:vimtex_view_method = 'zathura'
let g:vimtex_view_general_viewer = '/home/japorized/.bin/tabbed-zathura'
let g:livepreview_previewer = '/usr/bin/zathura'
{%@@ endif @@%}

{%@@ if profile != "WinCrap" @@%}
" Goyo
nmap <F3> :Goyo<cr>
let s:save_option = {}
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set noshowmode
  set noshowcmd
  set scrolloff=999
  if exists(':Limelight') == 2
    Limelight
    let s:save_option['limelight'] = 1
  endif
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  set scrolloff=5
  if get(s:save_option,'limelight', 0)
    execute 'Limelight!'
  endif
endfunction
augroup goyo_map
  autocmd! User GoyoEnter nested call <SID>goyo_enter()
  autocmd! User GoyoLeave nested call <SID>goyo_leave()
augroup END

" Limelight
  " Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

  " Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

  " Default: 0.5
let g:limelight_default_coefficient = 0.3

  " Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 2

  " Beginning/end of paragraph
  " When there's no empty line between the paragraphs
  " and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

  " Highlighting priority (default: 10)
  " Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1
{%@@ endif @@%}

" Airline
" let g:airline_theme='base17_eighties'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
colorscheme wal

if ! has('gui_running')
    set ttimeout
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" Startify configs
if has("autocmd")
  autocmd User Startified setlocal cursorline
endif
let g:startify_custom_header = [
\ '',
\ '      _   ________  ___     __           __  _ ___',
\ '     | | / /  _/  |/  / __ / /____ _____/ /_(_) _/_ __',
\ '     | |/ // // /|_/ /(_-</ __/ _ `/ __/ __/ / _/ // /',
\ '     |___/___/_/  /_/ /__/\__/\_,_/_/  \__/_/_/ \_, /',
\ '                                               /___/',
\ '',
\ ]
let g:startify_list_order = ['files', 'dir', 'sessions', 'bookmarks']
let g:startify_bookmarks = [ 
  \ {'v': '~/dotfiles/dotfiles/vimrc'},
  \ {'z': '~/dotfiles/dotfiles/zshrc'},
  {%@@ if profile == "Oolong" @@%}
  \ {'h': '~/.config/sxhkd/sxhkdrc'},
  \ {'b': '~/.config/bspwm/bspwmrc'},
  \ {'s': '~/.config/sublime-text-3/Packages/User/tex.sublime-completions'},
  {%@@ endif @@%}
  \ {'t': '~/dotfiles/dotfiles/tmux.conf'}
  \ ]
let g:startify_update_oldfiles = 1

" GitGutter
let g:gitgutter_sign_added='┃'
let g:gitgutter_sign_modified='┃'
let g:gitgutter_sign_removed='◢'
let g:gitgutter_sign_removed_first_line='◥'
let g:gitgutter_sign_modified_removed='◢'

" Indent Guides
nmap <Leader>il :IndentLinesToggle<cr>
let g:indentLine_enabled = 0
let g:indentLine_char = '┃'

" command-t
let g:CommandTSuppressMaxFilesWarning=1
let g:CommandTFileScanner='find'
let g:CommandTAlwaysShowDotFiles =1
let g:CommandTAcceptSelectionCommand='CommandTOpen tabe'

source /home/japorized/.vim/simplenoterc
