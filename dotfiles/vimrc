" General Configurations
syntax on
set background=dark
{%@@ if profile == "Earl-Grey.local" @@%}
set rtp+=/Users/JohnsonNg/Library/Python/2.7/lib/python/site-packages/powerline/bindings/vim/
{%@@ endif @@%}
set backspace=indent,eol,start
set laststatus=2
set noshowmode
set t_Co=256
set number
set relativenumber
set numberwidth=2
set cursorline
set ruler
set fillchars+=|
set foldmethod=indent
set fdl=3
set concealcursor=""
set conceallevel=2
set belloff=all   " Silence terminal bell
set expandtab     " Expand tabs to spaces
set ignorecase    " Ignore case when searching
set incsearch     " Show matches when searching
set showmatch     " Show matching bracket
set shiftwidth=2  " Number of spaces to use for (auto) indent
set softtabstop=2 " Number of tabs that a <Tab> counts for
set smartcase     " Override 'ignorecase' if search has uppercase
set tabstop=2     " The number of spaces that a <Tab> counts for

" Highlights
hi VertSplit ctermbg=NONE guibg=NONE cterm=NONE
highlight CursorLine cterm=NONE ctermbg=DarkGrey guibg=DarkGrey
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
hi Conceal ctermfg=132 guifg=#af5f87

" Workaround for crontab saving problems
au FileType crontab setlocal bkc=yes

if has("autocmd")
  augroup templates
    autocmd BufNewFile *.sh 0r ~/.vim/templates/shell_template.sh
    autocmd BufNewFile *.html 0r ~/.vim/templates/html_default_template.sh
    autocmd BufNewFile *.tex 0r ~/.vim/templates/tex_default.sh
  augroup END
endif

" netrw Configs
nmap <F2> :Vexplore<cr>
let g:netrw_liststyle=3    " Tree view
let g:netrw_banner=0       " Hide Banner by default, use I to toggle
let g:netrw_browse_split=3 " Opens new file in a new tab
let g:netrw_winsize=25     " netrw to only occupy 25% of the screen
let g:netrw_altv=1

" Pathogen plugin manager
execute pathogen#infect()
Helptags

" GitGutter Config
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
set updatetime=250

" Gundo configurations
nnoremap <F5> :GundoToggle<CR>
let g:gundo_preview_height= 30
let g:gundo_preview_bottom= 1
let g:gundo_right= 1
let g:gundo_return_on_revert= 0

" Indentline Configs
let g:indentLine_char='|'

" Tex configs
nmap <F12> :LLPStartPreview<cr>
let g:tex_conceal="abdgm"
autocmd Filetype tex setl updatetime=1000
{%@@ if profile == "Earl-Grey.local" @@%}
let g:livepreview_previewer = 'open -a Preview'
{%@@ elif profile == "Camomile" @@%}
let g:livepreview_previewer = 'zathura'
{%@@ endif @@%}

" Goyo
nmap <F3> :Goyo<cr>
let s:save_option = {}
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set noshowmode
  set noshowcmd
  set scrolloff=999
  if exists(':Limelight') == 2
    Limelight
    let s:save_option['limelight'] = 1
  endif
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  set scrolloff=5
  if get(s:save_option,'limelight', 0)
    execute 'Limelight!'
  endif
endfunction
augroup goyo_map
  autocmd! User GoyoEnter nested call <SID>goyo_enter()
  autocmd! User GoyoLeave nested call <SID>goyo_leave()
augroup END

" Limelight
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.3

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 0

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" vim-smooth-scroll
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 4)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 4)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 8)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 8)<CR>
