" General Configurations
if !has('nvim')
  set backspace=indent,eol,start
  set belloff=all   " Silence terminal bell
  set fillchars+=|
  set incsearch     " Show matches when searching
  set laststatus=2
  set ruler
endif

set nocompatible
set encoding=utf-8
filetype plugin on
syntax on
set background=dark
set concealcursor=""
set conceallevel=2
set expandtab     " Expand tabs to spaces
set foldlevelstart=3
set ignorecase    " Ignore case when searching
set noshowmode
set numberwidth=2
set showmatch     " Show matching bracket
set shiftwidth=2  " Number of spaces to use for (auto) indent
set smartcase     " Override 'ignorecase' if search has uppercase
set softtabstop=2 " Number of tabs that a <Tab> counts for
set tabstop=2     " The number of spaces that a <Tab> counts for
set t_Co=256
set timeoutlen=200
set splitbelow
map <SPACE> <Nop>
let mapleader=" "
filetype indent plugin on
colorscheme chaos

if has("autocmd")
  autocmd Syntax html,javascript,latex,vim setlocal foldmethod=indent
endif

if has('gvim')
  set guiheadroom=0
endif

" Highlights
hi VertSplit ctermbg=NONE guibg=NONE cterm=NONE
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" Workaround for crontab saving problems
au FileType crontab setlocal bkc=yes

if has("autocmd")
  autocmd FileType InsertLeave * update
endif

" netrw Configs
nmap <F1> :F<cr>
imap <F1> <C-o>:F<CR>
let g:netrw_liststyle=3    " Tree view
let g:netrw_banner=0       " Hide Banner by default, use I to toggle
let g:netrw_browse_split=3 " Opens new file in a new tab
let g:netrw_winsize=25     " netrw to only occupy 25% of the screen
let g:netrw_altv=1

" Pathogen plugin manager
execute pathogen#infect('bundle/always/{}', 'bundle/optional/{}', 'bundle/javascript/{}', 'bundle/tex/{}')
Helptags

" GitGutter Config
if exists('&signcolumn')  " > Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
set updatetime=250

" Gundo configurations
nnoremap <F5> :GundoToggle<CR>
let g:gundo_preview_height= 30
let g:gundo_help = 0
let g:gundo_return_on_revert= 0

" Indentline Configs
let g:indentLine_char='|'
let g:indentLine_setColors = 0

" Tex configs
let g:tex_flavor = 'latex'
let g:tex_conceal=""
let g:vimtex_fold_enabled=1
autocmd Filetype tex setl updatetime=1000
{%@@ if profile == "Earl-Grey.local" @@%}
let g:vimtex_view_enabled=0
let g:vimtex_view_automatic=0
" let g:vimtex_view_method='skim'
{%@@ elif profile == "sencha" @@%}
let g:vimtex_view_general_viewer = '/home/japorized/.bin/tabbed-zathura'
{%@@ endif @@%}
let g:vimtex_compiler_progname='nvr'
let g:vimtex_quickfix_latexlog = {
      \ 'overfull' : 0,
      \ 'underfull' : 0,
      \ 'font' : 0,
      \ 'packages' : {
      \   'natbib' : 0,
      \ },
      \}
let g:vimtex_quickfix_mode=0

" Goyo
nmap <F3> :Goyo<cr>
let s:save_option = {}
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set noshowmode
  set noshowcmd
  set scrolloff=999
  if exists(':Limelight') == 2
    Limelight
    let s:save_option['limelight'] = 1
  endif
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  set scrolloff=5
  if get(s:save_option,'limelight', 0)
    execute 'Limelight!'
  endif
endfunction
augroup goyo_map
  autocmd! User GoyoEnter nested call <SID>goyo_enter()
  autocmd! User GoyoLeave nested call <SID>goyo_leave()
augroup END

" Limelight
  " Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

  " Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

  " Default: 0.5
let g:limelight_default_coefficient = 0.3

  " Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 2

  " Beginning/end of paragraph
  " When there's no empty line between the paragraphs
  " and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

  " Highlighting priority (default: 10)
  " Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" vim-moodo

let g:moodo_mid = "\  %r%h\ %.40f%(\ %q%m%)\ "
let g:moodo_right = "%(%{MoodoFT()}%) %l/%L\ \ %2c\ \ "
let g:moodo_tabline_modified = ""
let g:moodo_tabline_closestr = ''
let g:moodo_modes = {
  \ 'n'      : '',
  \ 'no'     : '',
  \ 'v'      : '',
  \ 'V'      : '',
  \ "\<C-V>" : '',
  \ 's'      : '閭',
  \ 'S'      : '閭',
  \ "\<C-S>" : '閭',
  \ 'i'      : '',
  \ 'ic'     : '',
  \ 'ix'     : '',
  \ 'R'      : '',
  \ 'Rc'     : '',
  \ 'Rv'     : '',
  \ 'Rx'     : '',
  \ 'c'      : 'גּ',
  \ 'cv'     : 'גּ',
  \ 'ce'     : 'גּ',
  \ 'r'      : '',
  \ 'rm'     : '',
  \ '!'      : '',
  \ 't'      : ''
  \ }
let g:moodo_fticons = {
  \ 'conf'       : '',
  \ 'fugitive'   : '',
  \ 'help'       : '',
  \ 'magit'      : '',
  \ 'markdown'   : '',
  \ 'simplenote' : 'ﴬ',
  \ 'startify'   : '',
  \ 'vim'        : ''
  \ }

if ! has('gui_running')
    set ttimeout
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" GitGutter
let g:gitgutter_sign_added='┃'
let g:gitgutter_sign_modified='┃'
let g:gitgutter_sign_removed='◢'
let g:gitgutter_sign_removed_first_line='◥'
let g:gitgutter_sign_modified_removed='◢'

" Indent Guides
let g:indentLine_enabled = 0
let g:indentLine_char = '┃'

" vim-multiple-cursors
let g:multi_cursor_exit_from_insert_mode=0

" quick-scoping
" Trigger a highlight only when pressing f and F.
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" fff
let g:fff#split = "30vnew"
let g:fff#split_direction = "nosplitright"

autocmd VimEnter *
  \   if !argc()
  \ |   Startify
  \ |   wincmd w
  \ | endif

" ale-linter
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_save = 0
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 0

let g:SimplenoteVertical=1
source $HOME/.vim/simplenoterc
