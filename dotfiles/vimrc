" General Configurations
if !has('nvim')
  set backspace=indent,eol,start
  set belloff=all   " Silence terminal bell
  set fillchars+=|
  set incsearch     " Show matches when searching
  set laststatus=2
  set ruler
endif

set nocompatible
filetype plugin on
syntax on
set background=dark
set concealcursor=""
set conceallevel=2
set expandtab     " Expand tabs to spaces
set foldlevelstart=3
set ignorecase    " Ignore case when searching
set number
set noshowmode
set numberwidth=2
set relativenumber
set showmatch     " Show matching bracket
set shiftwidth=2  " Number of spaces to use for (auto) indent
set smartcase     " Override 'ignorecase' if search has uppercase
set softtabstop=2 " Number of tabs that a <Tab> counts for
set tabstop=2     " The number of spaces that a <Tab> counts for
set t_Co=256
set timeoutlen=200
nnoremap <SPACE> <Nop>
let mapleader=" "

if has("autocmd")
  if !has('nvim')
    filetype plugin indent on
  endif

  autocmd Syntax html,javascript,latex,vim setlocal foldmethod=indent
endif

if has('gvim')
  set guiheadroom=0
endif

" Highlights
hi VertSplit ctermbg=NONE guibg=NONE cterm=NONE
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
hi Conceal ctermfg=132 guifg=#af5f87

" Workaround for crontab saving problems
au FileType crontab setlocal bkc=yes

if has("autocmd")
  augroup templates
    autocmd BufNewFile *.sh 0r ~/.vim/templates/shell_template.sh
    autocmd BufNewFile *.html 0r ~/.vim/templates/html_default_template.sh
    autocmd BufNewFile *.tex 0r ~/.vim/templates/tex_default.sh
  augroup END

  autocmd FileType InsertLeave * update
endif

" netrw Configs
nmap <F1> :Vexplore<cr>
autocmd FileType netrw nnoremap q :q<CR>
let g:netrw_liststyle=3    " Tree view
let g:netrw_banner=0       " Hide Banner by default, use I to toggle
let g:netrw_browse_split=3 " Opens new file in a new tab
let g:netrw_winsize=25     " netrw to only occupy 25% of the screen
let g:netrw_altv=1

" Pathogen plugin manager
execute pathogen#infect()
Helptags

" GitGutter Config
if exists('&signcolumn')  " > Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
set updatetime=250

" Gundo configurations
nnoremap <F5> :GundoToggle<CR>
let g:gundo_preview_height= 30
let g:gundo_preview_bottom= 1
let g:gundo_right= 1
let g:gundo_return_on_revert= 0

" Indentline Configs
let g:indentLine_char='|'

" Tex configs
let g:tex_flavor = 'latex'
let g:tex_conceal=""
let g:vimtex_fold_enabled=1
autocmd Filetype tex setl updatetime=1000
{%@@ if profile == "Earl-Grey.local" @@%}
let g:livepreview_previewer = 'open -a Skim'
{%@@ elif profile == "Oolong" @@%}
let g:vimtex_view_general_viewer = '/home/japorized/.bin/tabbed-zathura'
let g:livepreview_previewer = '/usr/bin/zathura'
{%@@ endif @@%}

" Goyo
nmap <F3> :Goyo<cr>
let s:save_option = {}
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set noshowmode
  set noshowcmd
  set scrolloff=999
  if exists(':Limelight') == 2
    Limelight
    let s:save_option['limelight'] = 1
  endif
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  set scrolloff=5
  if get(s:save_option,'limelight', 0)
    execute 'Limelight!'
  endif
endfunction
augroup goyo_map
  autocmd! User GoyoEnter nested call <SID>goyo_enter()
  autocmd! User GoyoLeave nested call <SID>goyo_leave()
augroup END

" Limelight
  " Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

  " Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

  " Default: 0.5
let g:limelight_default_coefficient = 0.3

  " Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 2

  " Beginning/end of paragraph
  " When there's no empty line between the paragraphs
  " and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

  " Highlighting priority (default: 10)
  " Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" Lightline
" Style credits: https://github.com/xero/dotfiles
let s:base03 = [ '#151513', 233 ]
let s:base02 = [ '#222222', 0 ]
let s:base01 = [ '#4e4e43', 239 ]
let s:base00 = [ '#666656', 242  ]
let s:base0 = [ '#808070', 244 ]
let s:base1 = [ '#949484', 246 ]
let s:base2 = [ '#a8a897', 248 ]
let s:base3 = [ '#e8e8d3', 253 ]
let s:yellow = [ '#7A7A57', 11 ]
let s:orange = [ '#7A7A57', 3 ]
let s:red = [ '#5F8787', 1 ]
let s:magenta = [ '#8181A6', 13 ]
let s:cyan = [ '#87ceeb', 12 ]
let s:green = [ '#7A7A57', 3 ]
let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}
let s:p.normal.left = [ [ s:base3, s:magenta ], [ s:base3, s:base01 ] ]
let s:p.normal.right = [ [ s:base3, s:base1 ], [ s:base2, s:base01 ] ]
let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]
let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]
let s:p.insert.left = [ [ s:base02, s:cyan ], [ s:base3, s:base01 ] ]
let s:p.replace.left = [ [ s:base02, s:red ], [ s:base3, s:base01 ] ]
let s:p.visual.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]
let s:p.normal.middle = [ [ s:base0, s:base02 ] ]
let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]
let s:p.tabline.left = [ [ s:base3, s:base01, 'bold' ] ]
let s:p.tabline.tabsel = [ [ s:base3, s:magenta, 'bold' ] ]
let s:p.tabline.middle = [ [ s:base00, s:base02 ] ]
let s:p.tabline.right = copy(s:p.tabline.left)
let s:p.normal.error = [ [ s:base02, s:yellow ] ]
let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]
let g:lightline#colorscheme#sourcerer#palette = lightline#colorscheme#flatten(s:p)
let g:lightline = {
  \ 'colorscheme': 'sourcerer',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch' ],
  \             [ 'readonly', 'filename', 'modified' ]],
  \   'right': [ [ 'percent', 'lineinfo' ],
  \              [ 'fileencoding', 'filetype' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name'
  \ },
  \ 'separator': { 'left': '▓▒░', 'right': '░▒▓' },
  \ 'subseparator': { 'left': '▒', 'right': '░' }
  \ }
colorscheme wal

if ! has('gui_running')
    set ttimeout
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" GitGutter
let g:gitgutter_sign_added='┃'
let g:gitgutter_sign_modified='┃'
let g:gitgutter_sign_removed='◢'
let g:gitgutter_sign_removed_first_line='◥'
let g:gitgutter_sign_modified_removed='◢'

" Indent Guides
let g:indentLine_enabled = 0
let g:indentLine_char = '┃'

" vim-multiple-cursors
let g:multi_cursor_exit_from_insert_mode=0

autocmd VimEnter *
  \   if !argc()
  \ |   Startify
  \ |   Vexplore
  \ |   wincmd w
  \ | endif

source $HOME/.vim/simplenoterc
