" General Configurations
if !has('nvim')
  set backspace=indent,eol,start
  set belloff=all   " Silence terminal bell
  set fillchars+=|
  set incsearch     " Show matches when searching
  set laststatus=2
  set ruler
endif

set nocompatible
set encoding=utf-8
filetype plugin on
syntax on
set background=dark
set concealcursor=""
set conceallevel=2
set expandtab     " Expand tabs to spaces
set foldlevelstart=3
set ignorecase    " Ignore case when searching
set noshowmode
set numberwidth=2
set showmatch     " Show matching bracket
set shiftwidth=2  " Number of spaces to use for (auto) indent
set smartcase     " Override 'ignorecase' if search has uppercase
set softtabstop=2 " Number of tabs that a <Tab> counts for
set tabstop=2     " The number of spaces that a <Tab> counts for
set t_Co=256
set timeoutlen=200
set splitbelow
map <SPACE> <Nop>
let mapleader=" "
filetype indent plugin on

if has("autocmd")
  autocmd Syntax html,javascript,latex,vim setlocal foldmethod=indent
endif

if has('gvim')
  set guiheadroom=0
endif

" Highlights
hi VertSplit ctermbg=NONE guibg=NONE cterm=NONE
highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" Workaround for crontab saving problems
au FileType crontab setlocal bkc=yes

if has("autocmd")
  autocmd FileType InsertLeave * update
endif

" netrw Configs
nmap <F1> :Lexplore<cr>
imap <F1> <C-o>:Lexplore<CR>
let g:netrw_liststyle=3    " Tree view
let g:netrw_banner=0       " Hide Banner by default, use I to toggle
let g:netrw_browse_split=3 " Opens new file in a new tab
let g:netrw_winsize=25     " netrw to only occupy 25% of the screen
let g:netrw_altv=1

" Pathogen plugin manager
execute pathogen#infect('bundle/always/{}', 'bundle/optional/{}')
autocmd FileType tex execute pathogen#infect('bundle/tex/{}')
autocmd FileType javascript execute pathogen#infect('bundle/javascript/{}')
autocmd Filetype hs execute pathogen#infect('bundle/haskell/{}')
Helptags

" GitGutter Config
if exists('&signcolumn')  " > Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
set updatetime=250

" Gundo configurations
nnoremap <F5> :GundoToggle<CR>
let g:gundo_preview_height= 30
let g:gundo_help = 0
let g:gundo_return_on_revert= 0

" Indentline Configs
let g:indentLine_char='|'

" Tex configs
let g:tex_flavor = 'latex'
let g:tex_conceal=""
let g:vimtex_fold_enabled=1
autocmd Filetype tex setl updatetime=1000
{%@@ if profile == "Earl-Grey.local" @@%}
let g:vimtex_view_enabled=0
let g:vimtex_view_automatic=0
" let g:vimtex_view_method='skim'
{%@@ elif profile == "sencha" @@%}
let g:vimtex_view_general_viewer = '/home/japorized/.bin/tabbed-zathura'
{%@@ endif @@%}
let g:vimtex_compiler_progname='nvr'
let g:vimtex_quickfix_latexlog = {
      \ 'overfull' : 0,
      \ 'underfull' : 0,
      \ 'font' : 0,
      \ 'packages' : {
      \   'natbib' : 0,
      \ },
      \}
let g:vimtex_quickfix_mode=0

" Goyo
nmap <F3> :Goyo<cr>
let s:save_option = {}
function! s:goyo_enter()
  silent !tmux set status off
  silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  set noshowmode
  set noshowcmd
  set scrolloff=999
  if exists(':Limelight') == 2
    Limelight
    let s:save_option['limelight'] = 1
  endif
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  set showmode
  set showcmd
  set scrolloff=5
  if get(s:save_option,'limelight', 0)
    execute 'Limelight!'
  endif
endfunction
augroup goyo_map
  autocmd! User GoyoEnter nested call <SID>goyo_enter()
  autocmd! User GoyoLeave nested call <SID>goyo_leave()
augroup END

" Limelight
  " Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

  " Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

  " Default: 0.5
let g:limelight_default_coefficient = 0.3

  " Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 2

  " Beginning/end of paragraph
  " When there's no empty line between the paragraphs
  " and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

  " Highlighting priority (default: 10)
  " Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

" Lightline
" Style credits: https://github.com/xero/dotfiles
colorscheme chaos
let s:base03 = [ '#151513', 233 ]
let s:base02 = [ '#222222', 236 ]
let s:base01 = [ '#4e4e43', 239 ]
let s:base00 = [ '#666656', 242  ]
let s:base0 = [ '#808070', 244 ]
let s:base1 = [ '#949484', 246 ]
let s:base2 = [ '#a8a897', 248 ]
let s:base3 = [ '#e8e8d3', 253 ]
let s:dark = [ '#2d2d2d', 0 ]
let s:light = [ '#ededed', 15 ]
let s:gray = [ '8c8c8c', 8 ]
let s:yellow = [ '#7A7A57', 11 ]
let s:orange = [ '#7A7A57', 3 ]
let s:red = [ '#5F8787', 1 ]
let s:magenta = [ '#8181A6', 13 ]
let s:blue = [ '#0578fc', 12 ]
let s:cyan = [ '#87ceeb', 14 ]
let s:green = [ '#7A7A57', 3 ]
let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'command': {}, 'tabline': {}}
let s:p.normal.left = [ [ s:dark, s:magenta ], [ s:magenta, s:dark ] ]
let s:p.normal.middle = [ [ s:light, s:dark ] ]
let s:p.normal.right = [ [ s:light, s:base1 ], [ s:base2, s:dark ] ]
let s:p.inactive.left =  [ [ s:light, s:dark ], [ s:light, s:dark ] ]
let s:p.inactive.middle = [ [ s:light, s:dark ] ]
let s:p.inactive.right = [ [ s:dark, s:light ], [ s:light, s:dark ] ]
let s:p.insert.left = [ [ s:dark, s:cyan ], [ s:light, s:dark ] ]
let s:p.replace.left = [ [ s:dark, s:red ], [ s:light, s:dark ] ]
let s:p.visual.left = [ [ s:dark, s:green ], [ s:light, s:dark ] ]
let s:p.command.left = [ [ s:light, s:yellow, 'bold' ], [ s:light, s:dark ] ]
let s:p.tabline.left = [ [ s:light, s:dark, 'bold' ] ]
let s:p.tabline.tabsel = [ [ s:light, s:magenta, 'bold' ] ]
let s:p.tabline.middle = [ [ s:light, s:dark ] ]
let s:p.tabline.right = copy(s:p.tabline.left)
let s:p.normal.error = [ [ s:dark, s:yellow ] ]
let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]
let g:lightline#colorscheme#sourcerer#palette = lightline#colorscheme#flatten(s:p)
let g:lightline = {
  \ 'colorscheme': 'sourcerer',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch' ],
  \             [ 'readonly', 'filename', 'modified' ]],
  \   'right': [ [ 'sensible_lineinfo' ],
  \              [ 'filetype' ],
  \              [ 'linter_checking', 'linter_warnings', 'linter_errors' ]]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name',
  \   'sensible_lineinfo': 'SensibleLineinfo'
  \ },
  \ 'separator': { 'left': '▓▒░', 'right': '░▒▓' },
  \ 'subseparator': { 'left': '▒', 'right': '░' }
  \ }
function! SensibleLineinfo()
  return col('.') . ':' . line('.') . ':' . line('$')
endfunction
let g:lightline.mode_map = {
    \ 'n' : ' ',
    \ 'i' : ' ',
    \ 'R' : ' ',
    \ 'v' : ' ',
    \ 'V' : ' ',
    \ "\<C-v>": ' ',
    \ 'c' : ' ',
    \ 's' : ' ',
    \ 'S' : ' ',
    \ "\<C-s>": ' ',
    \ 't': ' ',
    \ }
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \ }
let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e "

if ! has('gui_running')
    set ttimeout
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" GitGutter
let g:gitgutter_sign_added='┃'
let g:gitgutter_sign_modified='┃'
let g:gitgutter_sign_removed='◢'
let g:gitgutter_sign_removed_first_line='◥'
let g:gitgutter_sign_modified_removed='◢'

" Indent Guides
let g:indentLine_enabled = 0
let g:indentLine_char = '┃'

" vim-multiple-cursors
let g:multi_cursor_exit_from_insert_mode=0

" quick-scoping
" Trigger a highlight only when pressing f and F.
let g:qs_highlight_on_keys = ['f', 'F']

autocmd VimEnter *
  \   if !argc()
  \ |   Startify
  \ |   Lexplore
  \ |   wincmd w
  \ | endif

" ale-linter
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_save = 0
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 0

let g:SimplenoteVertical=1
source $HOME/.vim/simplenoterc
